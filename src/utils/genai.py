# src/utils/genai.py

import os
from dotenv import load_dotenv
from openai import OpenAI
from fpdf import FPDF

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def generate_summary(prompt: str) -> str:
    full_prompt = (
        f"Write a technical summary for this AWS project: {prompt}\n\n"
        "Structure:\n"
        "- What it does\n"
        "- AWS services used\n"
        "- How the automation works\n"
        "- Deployment flow in 4–5 steps"
    )

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": full_prompt}],
        temperature=0.7,
    )

    return response.choices[0].message.content.strip()


def create_readme(summary: str, filepath: str):
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write("# AWS Project Report\n\n")
        f.write(summary)
        f.write("\n\n---\n\n")
        f.write("Generated by Snapidox\n")


import re

def create_linkedin_post(summary: str) -> str:
    lines = summary.splitlines()
    first_line = next((line for line in lines if line.strip()), "Just completed another AWS project!")

    services = extract_services(summary)
    services_line = f"🛠️ Services used: {', '.join(services)}" if services else ""

    return (
        f"{first_line}\n\n"
        f"{services_line}\n"
        f"📄 Full report generated using AI (Snapidox MVP)\n"
        f"#AWS #DevOps #CloudComputing #AI #Automation"
    )

def extract_services(summary: str) -> list:
    # Comprehensive set of AWS service names (you can expand this as needed)
    aws_services = [
        "EC2", "S3", "Lambda", "CloudFront", "Route 53", "IAM", "RDS", "DynamoDB", "SNS", "SQS",
        "CloudFormation", "CodePipeline", "CodeBuild", "ECS", "EKS", "Elastic Beanstalk",
        "API Gateway", "CloudWatch", "Secrets Manager", "KMS", "Redshift", "Athena",
        "Glue", "Step Functions", "Cognito", "Elastic Load Balancer", "VPC", "CloudTrail",
        "Inspector", "GuardDuty", "Organizations", "Budgets", "Cost Explorer"
    ]

    detected = []
    for service in aws_services:
        pattern = r"\b" + re.escape(service) + r"\b"
        if re.search(pattern, summary, re.IGNORECASE):
            # Use full AWS service name
            full_name = f"AWS {service}" if not service.startswith("Amazon") else service
            detected.append(full_name)

    return sorted(set(detected))


def create_pdf(summary_text: str, screenshot_paths: list, pdf_path: str):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)

    # Title
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "AWS Project Report", ln=True, align='C')

    # Summary content
    pdf.set_font("Arial", "", 12)
    pdf.multi_cell(0, 10, summary_text)

    # Screenshots
    if screenshot_paths:
        pdf.add_page()
        pdf.set_font("Arial", "B", 14)
        pdf.cell(0, 10, "Screenshots", ln=True)

        for path in screenshot_paths:
            pdf.image(path, w=180)
            pdf.ln(10)

    pdf.output(pdf_path)
